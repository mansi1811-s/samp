# name: GitHub Actions Demo
# run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
# on: [push]
# jobs:
#   Explore-GitHub-Actions:
#     runs-on: ubuntu-latest
#     steps:
#       - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
#       - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
#       - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
#       - name: Check out repository code
#         uses: actions/checkout@v4
#       - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
#       - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
#       - name: List files in the repository
#         run: |
#           ls ${{ github.workspace }}
#       - run: echo "üçè This job's status is ${{ job.status }}."

name: Build and Scan Docker Image

on:
  push:
    branches:
      - main  # Change this to your main branch name

jobs:
  build_and_scan:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        # Override automatic language detection by changing the below list
        # Supported options are ['csharp', 'cpp', 'go', 'java', 'javascript', 'python']
        language: ['python']

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker
      uses: docker/setup-buildx-action@v3
      # with:
      #   version: 20.10.7   # Adjust the Docker version as needed

    - name: Build Docker Image
      run: |
        docker build -t trapp:v1 .
      # working-directory: path/to/your/app  # Set the path to your app if necessary

    - name: Set up Trivy
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
      shell: bash

    - name: Scan Docker Image with Trivy
      run: |
        trivy image --severity=HIGH trapp:v1
      shell: bash
    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file. 
        # Prefix the list here with "+" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö https://git.io/JvXDl

    # ‚úèÔ∏è If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
    # - name: Set up CodeQL
    #   run: |
    #     codeqlURL=$(curl -s https://api.github.com/repos/github/codeql-cli-binaries/releases/latest | jq -r '.assets[].browser_download_url | select(contains("codeql-bundle"))')
    #     curl -L -o codeql-bundle.tar.gz $codeqlURL
    #     tar xzf codeql-bundle.tar.gz
    #     export PATH=$PATH:$PWD/codeql-bundle-*
    #   shell: bash


    # - name: Build CodeQL database
    #   run: |
    #     codeql database create python-database --language=python --source-root .
    #     codeql database analyze python-database mansi1811-s/samp
    #   shell: bash

    - name: Upload CodeQL results
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: codeql-database/results.sarif


